\documentclass[a4paper]{article}

%\VignetteIndexEntry{PhyloSim}
%\VignettePackage{phylosim}
%\VignetteDepends{R.oo}

% Packages
\usepackage{times}

% Definitions
\newcommand{\psim}{{\tt PhyloSim}}
\newcommand{\slan}{{\tt S}}
\newcommand{\rlan}{{\tt R}}
\newcommand{\lattice}{{\tt lattice}}
\newcommand{\code}[1]{{\tt #1}}
\setlength{\parindent}{0in}
\setlength{\parskip}{.1in}
\usepackage{fullpage}
\usepackage{hyperref}

% setup hyperref
\hypersetup{
	colorlinks=true,
	linkcolor=blue
}

\title{The \psim\ package}
\author{Botond Sipos}

\usepackage{Sweave}
\begin{document}

\maketitle

\tableofcontents

\section{Getting help}
\begin{itemize}

\item{\psim\ is extensively documented, the documentation of the \psim\ class is probably a good entry point for beginners.}
\item{Serious users might consider to read all class documentations providing more focused examples.}
\item{Additional examples can be found at \href{http://github.com/sbotond/phylosim/tree/master/examples/}{http://github.com/sbotond/phylosim/tree/master/examples/}.}
\item{The \code{ll()} method list the methods and virtual field implemented in the immediate class of an object which is useful as "proto-documentation".}

\end{itemize}

\section{Advanced examples}

\subsection{Simulating "domains" and heterogeneous evolution}

The following code illustrates how to set up a more complicated simulation of amino acid sequences involving "domains" and heterogeneous evolution.

First, load the package:
<<echo=FALSE,results=hide>>=
options(width=80)
@
<<echo=TRUE>>=
library(phylosim)
@
Enable the "fast \& careless mode":
<<echo=TRUE>>=
PSIM_FAST <- TRUE
@
Construct substitution process objects:
<<echo=TRUE>>=
wag <- WAG()
jtt <- JTT()
lg <- LG()
pam <- PAM()
@
Get an object summary for \code{wag}:
<<echo=TRUE>>=
summary(wag)
@
Get a bubble plot of \code{wag}:
<<echo=TRUE,fig=TRUE>>=
plot(wag, scale = 0.4)
@
\includegraphics{PhyloSim-005}

Construct a continous deletor process:
<<echo=TRUE>>=
cont.del <- ContinuousDeletor(rate = 0.005, max.length = 10, 
    dist = expression(rnorm(1, mean = 5, sd = 3)))
@
Construct the template sequence for the \code{cont.ins.lg} insertion process:
<<echo=TRUE>>=
templ.seq.wag <- AminoAcidSequence(length = 10)
@

Clone the template sequence for the \code{cont.ins.wag} process:
<<echo=TRUE>>=
templ.seq.lg <- clone(templ.seq.wag)
@

Construct continous insertor process object \code{cont.ins.wag}:
<<echo=TRUE>>=
cont.ins.wag <- ContinuousInsertor(rate = 0.005, max.length = 10, 
    dist = expression(rnorm(1, mean = 5, sd = 3)))
@

Construct continous insertor process object \code{cont.ins.lg}:
<<echo=TRUE>>=
cont.ins.lg <- ContinuousInsertor(rate = 0.005, max.length = 10, 
    dist = expression(rnorm(1, mean = 5, sd = 3)))
@

Setting up the template sequences for the insertion processes:
<<echo=TRUE>>=
templ.seq.wag$processes <- list(list(wag, cont.ins.wag, cont.del))
templ.seq.lg$processes <- list(list(lg, cont.ins.lg, cont.del))
@

Now the \code{cont.ins.lg} process samples the states from the equlibrium distribution of the \code{LG} model and \code{cont.ins.wag} samples the states from the \code{WAG} model.

Disabling write protection for the insertion processes:
<<echo=TRUE>>=
cont.ins.wag$writeProtected <- FALSE
cont.ins.lg$writeProtected <- FALSE
@

Setting the template sequence for the insertion processes:
<<echo=TRUE>>=
cont.ins.wag$templateSeq <- templ.seq.wag
cont.ins.lg$templateSeq <- templ.seq.lg
@

Setting up the insert hook for the insertion processes: 
<<echo=TRUE>>=
cont.ins.wag$insertHook <- function(seq, target.seq, event.pos, 
    insert.pos) {
    plusInvGamma(seq, process = wag, pinv = 0.4, shape = 0.6)
    return(seq)
}
cont.ins.lg$insertHook <- function(seq, target.seq, event.pos, 
    insert.pos) {
    plusInvGamma(seq, process = lg, pinv = 0.4, shape = 0.6)
    return(seq)
}
@
Insert hook functions are called just before inserting the sequence generated by the insertion process.
This function allows to perform arbitrary modifications on the inserted sequence object. In this case the
insert hook functions will sample the site-process specific rate multipliers of the substitution processes from an invariants plus discrete gamma model.

Now the processes are in place, so it is time to set up the root sequence.

<<echo=TRUE>>=
seq <- AminoAcidSequence(length = 200)
@

Now we will create a pattern of processes:

<<echo=TRUE>>=
process.pattern <- c(rep(list(list(wag, cont.del, cont.ins.wag)), 
    times = 50), rep(list(list(jtt)), times = 100), rep(list(list(lg, 
    cont.del, cont.ins.lg)), times = 50))
@

The "left linker", "core" and "right linker" regions evolve by different sets of processes. The core region has no indel processes attached, so its length will remain constant.

Apply the process pattern to the root sequence:
<<echo=TRUE>>=
seq$processes <- process.pattern
@

Set up site specific rates by iterating over sites and sampling rates from 
a substitution process specific distribution:
<<echo=TRUE>>=
for (i in 1:seq$length) {
    if (isAttached(seq$sites[[i]], jtt)) {
        while ((site.rate <- rnorm(1, mean = 0.001, sd = 0.01)) < 
            0) {
        }
        setRateMultipliers(seq, jtt, site.rate, index = i)
    }
    else if (isAttached(seq$sites[[i]], wag)) {
        plusInvGamma(seq, process = wag, pinv = 0.4, shape = 0.6, 
            index = i)
    }
    else if (isAttached(seq$sites[[i]], lg)) {
        plusInvGamma(seq, process = lg, pinv = 0.4, shape = 0.6, 
            index = i)
    }
}
@

Sample the states of the root sequence from the attached substitution processes:
<<echo=TRUE>>=
sampleStates(seq)
print(seq)
@

Plot the total rates of the sites:
<<echo=TRUE,fig=TRUE>>=
plot(seq)
@
\includegraphics{PhyloSim-020}

Read in a tree using the \code{ape} package:
<<echo=FALSE,results=hide>>=
cat("(((t2:0.1231297638,t4:0.1231297638):0.2131353685,(t3:0.02843331083,t5:0.02843331083):0.3078318214):0.1698207644,t1:0.5060858966);",file="smalldemotree.nwk")
@
<<echo=TRUE>>=
tree <- read.tree(file = "smalldemotree.nwk")
@
<<echo=FALSE,results=hide>>=
file.remove("smalldemotree.nwk");
@

Construct the simulation object and get an object summary:
<<echo=TRUE>>=
sim <- PhyloSim(phylo = tree, root.seq = seq)
summary(sim)
@

Plot the simulation object:
<<echo=TRUE,fig=TRUE>>=
plot(sim)
@

Create a node hook function:
<<echo=TRUE>>=
node.hook <- function(seq) {
    for (site in seq$sites) {
        if (isAttached(site, jtt)) {
            attachProcess(site, pam)
        }
    }
    return(seq)
}
@

A "node hook" is a function which accepts a Sequence object
through the named argument "seq" and returns a Sequence object.
After simulating the branch leading to the node, the resulting
\code{Sequence} object is passed to the node hook and the returned object
is used to simulate the downstream branches.

The \code{node.hook} function will attach the \code{pam} substitution process to all
sites which have the \code{jtt} process attached (the "core" region). The affected sites 
will evolve with a doubled rate by a mixture of substitution processes in the clade defined by the node.

Attach the hook to node 8:
<<echo=TRUE>>=
attachHookToNode(sim, node = 8, fun = node.hook)
@

Run the simulation:
<<echo=TRUE>>=
Simulate(sim)
@

Plot the resulting alingment alongside the tree:
<<echo=TRUE,fig=TRUE>>=
plot(sim)
@

Save the resulting alignment, ommit the internal nodes:
<<echo=TRUE>>=
saveAlignment(sim, file = "example_V1_aln.fas", skip.internal = TRUE)
@
<<echo=FALSE,results=hide>>=
file.remove("example_V1_aln.fas")
@

Disable fast mode:
<<echo=TRUE>>=
rm(PSIM_FAST)
@


\subsection{Evolving codon seqeunces}

Enable ”fast careless” mode:
<<echo=TRUE>>=
PSIM_FAST <- TRUE
@
Construct a GY94 codon substitution model:
<<echo=TRUE>>=
p <- GY94()
@
Set the transition/transverion rate ratio:
<<echo=TRUE>>=
p$kappa = 2
@
Sample codon frequencies from a normal distribution:
<<echo=TRUE>>=
codon.freqs <- abs(rnorm(61, mean = 10, sd = 3))
codon.freqs <- codon.freqs/sum(codon.freqs)
p$equDist <- codon.freqs
@
Get object summary for p:
<<echo=TRUE>>=
summary(p)
@

Construct a discrete deletor process:
<<echo=TRUE>>=
d<-DiscreteDeletor(
        rate=0.025,
        sizes=1:4,
        probs=c(4,3,2,1)
);
@

Construct a discrete insertor process inserting neutrally evolving sites:
<<echo=TRUE>>=
i<-DiscreteInsertor(
        rate=0.04,
        sizes=1:4,
        probs=c(4,3,2,1),
        template.seq=CodonSequence(length=4,processes=list(list(p)))
);
@

Construct root sequence and attach process p:
<<echo=TRUE>>=
s<-CodonSequence(length=100,processes=list(list(p)))
@

Sample omegas from a discrete model:
<<echo=TRUE>>=
omegaVarM3(s,p,omegas=c(0,1,2),probs=c(2/4,1/4,1/4))
@

Plot the omega values across sites:
<<echo=TRUE,fig=TRUE>>=
plotParametersAtSites(s,p,"omega");
@

Sample states:
<<echo=TRUE>>=
sampleStates(s)
@
Construct the simulation object:
<<echo=FALSE,results=hide>>=
cat("(((t2:0.1231297638,t4:0.1231297638):0.2131353685,(t3:0.02843331083,t5:0.02843331083):0.3078318214):0.1698207644,t1:0.5060858966);",file="smalldemotree.nwk")
@
<<echo=TRUE>>=
sim <- PhyloSim(root.seq = s, phylo = read.tree("smalldemotree.nwk"))
@
<<echo=FALSE,results=hide>>=
file.remove("smalldemotree.nwk");
@
Create a node hook function and attach to node 8:
<<echo=TRUE>>=
node.hook <- function(seq) {
	setOmegas(seq, p, 1)
	attachProcess(seq, d)
	attachProcess(seq, i)
	return(seq)
}
attachHookToNode(sim, node = 8, fun = node.hook)
@
Run the simulation:
<<echo=TRUE>>=
Simulate(sim)
@
<<echo=TRUE,fig=TRUE>>=
plot(sim)
@
Save the resulting alignment:
<<echo=TRUE>>=
saveAlignment(sim, file = "example_V2_aln.fas", )
@
<<echo=FALSE,results=hide>>=
file.remove("example_V2_aln.fas")
@

Disable ”fast careless” mode:
<<echo=TRUE>>=
rm(PSIM_FAST)
@
\section{The details of the field deletion model}

Dummy text.

\end{document}




